datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Course {
  id String @id @default(uuid())

    userId  String? // üëà now it's optional
  title String @db.Text
  description String? @db.Text
  imageUrl String? @db.Text
  price Float?
  isPublished Boolean @default(false)

  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])

  chapters Chapter[]
  attachments Attachment[]
  purchases Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id String @id @default(uuid())
  name String @unique
  courses Course[]
}

model Attachment {
  id String @id @default(uuid())
  name String
  url String @db.Text

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id String @id @default(uuid())
  title String
  description String? @db.Text
  videoUrl String? @db.Text // Store full YouTube URL or just the video ID

  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)

  

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}
model UserProgress {
  id String @id @default(uuid())
  userId String

  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase {
  id String @id @default(uuid())
  userId String

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id String @id @default(uuid())
  userId String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



model Option {
  id         String   @id @default(uuid())
  text       String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
}





model StudentAnswer {
  id         String   @id @default(cuid())
  studentId  String
  questionId String
  question   Question @relation(fields: [questionId], references: [id])
  answer     String
  isCorrect  Boolean? // ‚Üê Make it optional for now
  createdAt  DateTime @default(now())

  @@unique([studentId, questionId])
  @@index([questionId])
}

model Question {
  id        String   @id @default(uuid())
  question  String
  answer    String
  createdAt DateTime @default(now()) // ‚úÖ must be here
  updatedAt DateTime?                // optional if you're using it

  options   Option[]

  

  StudentAnswer StudentAnswer[]
}

model Feedback {
  id            Int      @id @default(autoincrement())
  studentId     String
  questionId    Int
  correctAnswer String
  isCorrect     Boolean
  createdAt     DateTime @default(now())
}



